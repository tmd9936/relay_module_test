#!/usr/bin/env python

import rospy
import os, sys
from ctypes import CDLL, POINTER, c_int, c_byte, c_char_p, c_uint32, c_void_p, pointer
import ctypes
import actionlib

from std_msgs.msg import Int16
from irop_lift.msg import lift_controlAction, lift_controlFeedback, lift_controlResult

HALF_TIME = 13
NO_STOP_TIME = 0

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

def charpToString(charp):
    return str(ctypes.string_at(charp))

def stringToCharp(s):   
    return bytes(s)

global relay_lib, relay_init, relay_device_enum, device
relay_lib = CDLL(resource_path("../libs/usb_relay_device.so"))
relay_init = relay_lib.usb_relay_init()
relay_device_enum = relay_lib.usb_relay_device_enumerate()

relay_device_enum = int(relay_device_enum)

print(relay_device_enum)


device = relay_lib.usb_relay_device_open(relay_device_enum)
device = int(device)

print(device)

def Lift_up(time):
    global relay_lib, device

    print(device)

    if time == NO_STOP_TIME:
        rospy.loginfo("LIFT UP")

    channel = relay_lib.usb_relay_device_close_one_relay_channel(device, c_int(2))
    rospy.loginfo(channel)
    channel = relay_lib.usb_relay_device_open_one_relay_channel(device, c_int(1))
    if time != NO_STOP_TIME:
        rospy.loginfo("LIFT HALF UP")
        rospy.sleep(int(time))
        channel = relay_lib.usb_relay_device_close_one_relay_channel(device, c_int(1))
    
def Lift_down(time):
    global relay_lib, device

    if time == NO_STOP_TIME:
        rospy.loginfo("LIFT DOWN")

    channel = relay_lib.usb_relay_device_close_one_relay_channel(device, c_int(1))
    rospy.loginfo(channel)

    channel = relay_lib.usb_relay_device_open_one_relay_channel(device, c_int(2))
    if time != NO_STOP_TIME:
        rospy.loginfo("LIFT HALF DOWN")
        rospy.sleep(int(time))
        channel = relay_lib.usb_relay_device_close_one_relay_channel(device, c_int(2))


class Action_Server():
    def __init__(self):
        self.lift_server = actionlib.SimpleActionServer(
            'lift_control_server', lift_controlAction, 
            execute_cb=self.execute_cb,
            auto_start=False
        )
        self.lift_server.start()

    def execute_cb(self, goal):
        feedback = lift_controlFeedback()
        result_a = lift_controlResult()

        feedback_str = ''
        result_str = ''
        rate = rospy.Rate(20)

        if goal.direction == "up":
            feedback_str = "upppp"
            feedback.feedback_key = feedback_str

            result_str = "LIFT UP DONE!"
            result_a.result_key = result_str

            self.lift_server.publish_feedback(feedback)
            Lift_up(NO_STOP_TIME)

        elif goal.direction == "hup":
            feedback_str = "half upppp"
            feedback.feedback_key = feedback_str

            result_str = "LIFT HALF UP DONE!"
            result_a.result_key = result_str

            self.lift_server.publish_feedback(feedback)
            Lift_up(HALF_TIME)

        elif goal.direction == "down":
            feedback_str = "downnnn"
            feedback.feedback_key = feedback_str

            result_str = "LIFT DOWN DONE!"
            result_a.result_key = result_str

            self.lift_server.publish_feedback(feedback)            
            Lift_down(NO_STOP_TIME)

        elif goal.direction == "hdown":
            feedback_str = "half downnnn"
            feedback.feedback_key = feedback_str

            result_str = "LIFT HALF DOWN DONE!"
            result_a.result_key = result_str

            self.lift_server.publish_feedback(feedback)            
            Lift_down(HALF_TIME)

        else:
            pass

        self.lift_server.set_succeeded(result_a)


if __name__ == "__main__":
    rospy.init_node("lift_control_server")
    rospy.loginfo("Begin Lift Control Server")

    s = Action_Server()
    rospy.spin()
    # device_close = relay_lib.usb_relay_device_close(relay_device_enum)
    # realy_exit = relay_lib.usb_relay_exit()